<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.12">
  <POU Name="FB_GetPhilipsHueLight" Id="{3e0a1074-4467-4d89-beb1-9cd60e8ac5fc}" SpecialFunc="None">
    <Declaration><![CDATA[{ attribute 'TcHmiSymbol.ReadOnly' }
FUNCTION_BLOCK FB_GetPhilipsHueLight
VAR_INPUT
    bSend                : BOOL;
    nLightIndex          : UINT;
END_VAR
VAR_IN_OUT
    fbClient             : FB_IotHttpClient;
END_VAR
VAR_OUTPUT
    bBusy                : BOOL;
    bError               : BOOL;
    Q 					 : BOOL; // Falling edge of bBusy
    nPercentage			 : UINT(0..100);
END_VAR
VAR
    fbRequest            : FB_IotHttpRequest;
    fbRisingEdgeSend     : R_TRIG;

    {attribute 'TcEncoding':='UTF-8'}
    sContent             : STRING(2047);

    sComposedUri         : STRING(255);

	// Variables for parsing JSON manually
    pos                  : UDINT;
    posOn                : UDINT;
    posBri               : UDINT;
    onBool               : BOOL;
    briVal               : DINT;
    briStr               : STRING(10);
    i                    : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Q := FALSE;
fbRisingEdgeSend(CLK:= bSend OR bBusy);

IF NOT bBusy THEN
    IF fbRisingEdgeSend.Q AND nLightIndex > 0 THEN
        sComposedUri := '/api/';
        sComposedUri := CONCAT(sComposedUri, GVL.sHueApiKey);
        sComposedUri := CONCAT(sComposedUri, '/lights/');
        sComposedUri := CONCAT(sComposedUri, UINT_TO_STRING(nLightIndex));
        IF fbRequest.SendRequest(
                sUri:=sComposedUri,
                fbClient:=fbClient,
                eRequestType:=ETcIotHttpRequestType.HTTP_GET,
                pContent:=0,
                nContentSize:=0,
                0) THEN
            bBusy:= TRUE;
            bError:= FALSE;
		ELSE
			bError:=TRUE;
			Q:= TRUE;
        END_IF
    END_IF
ELSE
    IF NOT fbRequest.bBusy THEN
        bError:= TRUE;
        IF NOT fbRequest.bError AND fbRequest.eErrorId = HTTP_REQ_ERR_SUCCESS  THEN
            IF fbRequest.GetContent(pContent:= ADR(sContent), nContentSize:= SIZEOF(sContent), bSetNullTermination:= TRUE) THEN
                IF fbRequest.nStatusCode >= 200 AND fbRequest.nStatusCode < 300 AND fbRequest.nContentSize > 0 THEN
                    // Parse JSON manually using string operations (we could use the JSON PLC library but doing it manually is simple enough and avoids potential problems, e.g. with dynamic allocations)
                    posOn := FIND2(ADR(sContent), ADR('"on":'));
                    posBri := FIND2(ADR(sContent), ADR('"bri":'));
                    IF posOn > 0 AND posBri > 0 THEN
                        // Extract on
                        pos := posOn + 5; // after '"on":'
                        WHILE pos <= LEN2(ADR(sContent)) AND MID2(ADR(sContent), 1, pos) = ' ' DO
                            pos := pos + 1;
                        END_WHILE
                        IF pos <= LEN2(ADR(sContent)) THEN
                            IF MID2(ADR(sContent), 1, pos) = 't' THEN
                                onBool := TRUE;
                            ELSE
                                onBool := FALSE;
                            END_IF

                            // Extract bri
                            pos := posBri + 6; // After '"bri":'
                            WHILE pos <= LEN2(ADR(sContent)) AND MID2(ADR(sContent), 1, pos) = ' ' DO
                                pos := pos + 1;
                            END_WHILE
                            briStr := '';
                            WHILE pos <= LEN2(ADR(sContent)) AND MID2(ADR(sContent), 1, pos) >= '0' AND MID2(ADR(sContent), 1, pos) <= '9' DO
                                briStr := CONCAT(briStr, MID2(ADR(sContent), 1, pos));
                                pos := pos + 1;
                            END_WHILE
                            IF LEN(briStr) > 0 THEN
                                briVal := STRING_TO_DINT(briStr);
                                IF onBool THEN
                                    nPercentage := REAL_TO_UINT(DINT_TO_REAL(MAX(MIN(briVal, 254), 0)) / 254.0 * 100.0);
                                ELSE
                                    nPercentage := 0;
                                END_IF
                                bError := FALSE;
                            END_IF
                        END_IF
                    END_IF
                END_IF
            END_IF
        END_IF
        bBusy:= FALSE;
        Q := TRUE;
    END_IF
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>